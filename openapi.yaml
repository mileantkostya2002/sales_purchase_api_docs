openapi: 3.0.3
info:
  title: Odoo Sales/Order API
  version: 1.0.0
  description: API for managing Sales Orders, Purchase Orders, Products, Units of Measure, and Categories in Odoo.

servers:
  - url: https://your-odoo-domain.com
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    OrderLine:
      type: object
      properties:
        display_type:
          type: string
          enum: [line_section, line_note]
        name:
          type: string
        product_id:
          type: integer
        quantity:
          type: number
        product_uom:
          type: integer
      example:
        display_type: line_section
        name: "Raw Materials"
        product_id: 42
        quantity: 10
        product_uom: 1

    Order:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        partner:
          type: string
        state:
          type: string
        amount_untaxed:
          type: number
        amount_tax:
          type: number
        amount_total:
          type: number
        note:
          type: string
        client_order_ref:
          type: string
        updated_by:
          type: string

    Product:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        default_code: { type: string }
        list_price: { type: number }
        standard_price: { type: number }
        uom_id: { type: integer }
        uom_name: { type: string }
        categ_id: { type: integer }
        categ_name: { type: string }
        barcode: { type: string }
        active: { type: boolean }
        qty_available: { type: number }

    UoM:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        category_id: { type: integer }
        category_name: { type: string }
        uom_type: { type: string }
        ratio: { type: number }
        rounding: { type: number }
        active: { type: boolean }

    Category:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        complete_name: { type: string }
        parent_id: { type: integer, nullable: true }
        parent_name: { type: string, nullable: true }
        product_count: { type: integer }
        children:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        sample_products:
          type: array
          items:
            $ref: '#/components/schemas/Product'

paths:

  # ------------------ PURCHASE ORDERS ------------------

  /api/purchase/create:
    post:
      tags: [Purchase Orders]
      summary: Create a Purchase Order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note: { type: string }
                order_lines:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderLine'
              required: [order_lines]
              example:
                note: "Urgent delivery needed"
                order_lines:
                  - display_type: line_section
                    name: "Raw Materials"
                    product_id: 42
                    quantity: 10
                    product_uom: 1
      responses:
        '201':
          description: Purchase Order created
          content:
            application/json:
              example:
                success: true
                order:
                  id: 101
                  name: "PO0001"
                  partner: "John Doe"
                  amount_untaxed: 1000.0
                  amount_tax: 200.0
                  amount_total: 1200.0
                  state: "draft"
                  note: "Urgent delivery needed"
                order_lines:
                  - display_type: line_section
                    name: "Raw Materials"
                    sequence: 1
                  - product_id: 42
                    product_name: "Steel"
                    quantity: 10
                    product_uom: "Units"
                    price_unit: 50
                    subtotal: 500
                    total: 600
                    sequence: 2

  /purchase/my-orders:
    get:
      tags: [ Purchase Orders ]
      summary: Get all Purchase Orders for the authenticated employee
      description: |
        Returns all purchase orders created by the authenticated employee. 
        Supports pagination, filtering by state, search by name/partner, and date range.

        **Query parameters (optional):**
        - `limit`: number of records to return (default: 100)
        - `offset`: pagination offset (default: 0)
        - `state`: filter by state (`draft`, `sent`, `to approve`, `purchase`, `done`, `cancel`)
        - `search`: search by order name or partner name
        - `date_from`: filter orders from this date (`YYYY-MM-DD`)
        - `date_to`: filter orders until this date (`YYYY-MM-DD`)

        **Authorization:** Bearer JWT token required.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
          description: Maximum number of records to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Pagination offset
        - name: state
          in: query
          schema:
            type: string
            enum: [ draft, sent, to approve, purchase, done, cancel ]
          description: Filter by order state
        - name: search
          in: query
          schema:
            type: string
          description: Search by order name or partner name
        - name: date_from
          in: query
          schema:
            type: string
            format: date
          description: Filter orders created from this date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
          description: Filter orders created until this date
      responses:
        '200':
          description: Successful response with a list of Purchase Orders
          content:
            application/json:
              example:
                success: true
                employee: "John Smith"
                partner_id: 7
                total_count: 15
                limit: 20
                offset: 0
                stats:
                  draft: 1
                  sent: 0
                  to approve: 2
                  purchase: 7
                  done: 2
                  cancel: 0
                orders:
                  - id: 101
                    name: "PO0001"
                    partner: "John Doe"
                    date_order: "2025-10-06T10:00:00"
                    date_approve: "2025-10-07T10:00:00"
                    state: "purchase"
                    state_label: "Purchase"
                    amount_untaxed: 1000
                    amount_tax: 200
                    amount_total: 1200
                    currency: "USD"
                    responsible: "Employee Name"
                    order_line_count: 2
                    order_lines:
                      - product_id: 42
                        product_name: "Steel"
                        quantity: 10
                        product_uom: "Units"
                        price_unit: 50
                        subtotal: 500
                        total: 600
                      - product_id: 50
                        product_name: "Copper"
                        quantity: 5
                        product_uom: "Units"
                        price_unit: 50
                        subtotal: 250
                        total: 300
        '400':
          description: Invalid parameter or employee without partner
          content:
            application/json:
              example:
                error: "Employee does not have an associated partner"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "Internal server error: <details>"

  /api/purchase/{order_id}:
    get:
      tags: [ Purchase Orders ]
      summary: Get a specific Purchase Order by ID
      description: |
        Retrieve a purchase order by its ID.
        Employee must be authenticated via API token.
        
        **Authorization:** Bearer JWT token required.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the Purchase Order to retrieve
      responses:
        '200':
          description: Successful retrieval of Purchase Order
          content:
            application/json:
              example:
                success: true
                order:
                  id: 101
                  name: "PO0001"
                  partner_id: 7
                  partner: "John Doe"
                  amount_untaxed: 1000
                  amount_tax: 200
                  amount_total: 1200
                  state: "purchase"
                  date_order: "2025-10-06T10:00:00"
                  responsible: "Employee Name"
                  responsible_id: 3
                  note: "Urgent delivery needed"
                order_lines:
                  - display_type: "line_section"
                    name: "Raw Materials"
                    sequence: 1
                  - product_id: 42
                    product_name: "Steel"
                    quantity: 10
                    product_uom: "Units"
                    product_uom_id: 1
                    price_unit: 50
                    subtotal: 500
                    total: 600
                    sequence: 2
        '404':
          description: Purchase Order not found
          content:
            application/json:
              example:
                error: "Purchase Order with id 42 not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "Internal server error: <details>"


  /api/purchase/{order_id}/update:
    put:
      tags: [Purchase Orders]
      summary: Update a Purchase Order
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: integer }
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note: { type: string }
                order_lines:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderLine'
              example:
                note: "Updated delivery instructions"
                order_lines:
                  - display_type: line_section
                    name: "Updated Raw Materials"
                    product_id: 42
                    quantity: 10
                    product_uom: 2
      responses:
        '200':
          description: Purchase Order updated
          content:
            application/json:
              example:
                success: true
                message: "Purchase Order updated successfully"
                order:
                  id: 101
                  name: "PO0001"
                  partner: "John Doe"
                  state: "draft"
                  amount_total: 1200.0
                  note: "Updated delivery instructions"
                  updated_by: "Employee Name"
                order_lines:
                  - display_type: line_section
                    name: "Updated Raw Materials"
                    sequence: 1
                  - product_id: 42
                    product_name: "Steel"
                    quantity: 10
                    product_uom: "kg"
                    price_unit: 50
                    subtotal: 500
                    total: 600
                    sequence: 2

  /api/purchase/{order_id}/confirm:
    post:
      tags: [Purchase Orders]
      summary: Confirm a Purchase Order
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: integer }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Purchase Order confirmed
          content:
            application/json:
              example:
                success: true
                message: "Purchase Order confirmed successfully"
                order:
                  id: 101
                  name: "PO0001"
                  partner: "John Doe"
                  state: "purchase"
                  amount_total: 1200.0
                  confirmed_by: "Employee Name"
                  is_mobile_report: true



  # ------------------ SALES ORDERS ------------------

  /api/sales/create:
    post:
      tags: [Sales Orders]
      summary: Create a Sales Order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note: { type: string }
                client_order_ref: { type: string }
                order_lines:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderLine'
              example:
                note: "Please deliver before 5 PM"
                client_order_ref: "NEW-REF-123"
                order_lines:
                  - display_type: line_section
                    name: "Section A"
                    product_id: 42
                    quantity: 5
                    product_uom: 1
      responses:
        '201':
          description: Sales Order created
          content:
            application/json:
              example:
                success: true
                order:
                  id: 201
                  name: "SO0001"
                  partner: "John Doe"
                  state: "draft"
                  amount_total: 800.0
                  note: "Please deliver before 5 PM"
                  client_order_ref: "NEW-REF-123"

  paths:
  /api/sales/{order_id}:
    get:
      tags: [Sales Orders]
      summary: Get a specific Sales Order by ID
      description: |
        Retrieve a sales order by its ID.
        Employee must be authenticated via API token.

        **Authorization:** Bearer JWT token required.
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the Sales Order to retrieve
      responses:
        '200':
          description: Successful retrieval of Sales Order
          content:
            application/json:
              example:
                success: true
                order:
                  id: 201
                  name: "SO0001"
                  partner_id: 7
                  partner: "John Doe"
                  amount_untaxed: 800
                  amount_tax: 160
                  amount_total: 960
                  state: "sale"
                  date_order: "2025-10-06T12:00:00"
                  note: "Please deliver before 5 PM"
                  client_order_ref: "Customer Reference #123"
                order_lines:
                  - display_type: "line_section"
                    name: "Section Title - Hardware"
                    sequence: 1
                  - product_id: 42
                    product_name: "Laptop"
                    quantity: 2
                    product_uom: "Units"
                    product_uom_id: 1
                    price_unit: 400
                    subtotal: 800
                    total: 960
                    sequence: 2
        '404':
          description: Sales Order not found
          content:
            application/json:
              example:
                error: "Sales Order with id 42 not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "Internal server error: <details>"

  
  /api/sales/{order_id}/update:
    put:
      tags: [Sales Orders]
      summary: Update a Sales Order
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: integer }
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note: { type: string }
                client_order_ref: { type: string }
                order_lines:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderLine'
              example:
                note: "Updated delivery instructions"
                client_order_ref: "NEW-REF-123"
                order_lines:
                  - display_type: line_section
                    name: "Updated Section"
                    product_id: 42
                    quantity: 5
                    product_uom: 1
      responses:
        '200':
          description: Sales Order updated
          content:
            application/json:
              example:
                success: true
                message: "Sales Order updated successfully"
                order:
                  id: 201
                  name: "SO0001"
                  partner: "John Doe"
                  state: "draft"
                  amount_total: 800.0
                  note: "Updated delivery instructions"
                  client_order_ref: "NEW-REF-123"
                  updated_by: "Employee Name"

  /api/sales/{order_id}/confirm:
    post:
      tags: [Sales Orders]
      summary: Confirm a Sales Order
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: integer }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sales Order confirmed
          content:
            application/json:
              example:
                success: true
                message: "Sales Order confirmed successfully"
                order:
                  id: 201
                  name: "SO0001"
                  partner: "John Doe"
                  state: "sale"
                  amount_total: 800.0
                  confirmed_by: "Employee Name"
                  is_mobile_report: true

  /api/sales/my-orders:
    get:
      tags: [Sales Orders]
      summary: Get all Sales Orders for the authenticated employee
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, example: 20 }
        - in: query
          name: offset
          schema: { type: integer, example: 0 }
        - in: query
          name: state
          schema: { type: string, example: "sale" }
        - in: query
          name: search
          schema: { type: string, example: "SO" }
        - in: query
          name: date_from
          schema: { type: string, format: date, example: "2025-01-01" }
        - in: query
          name: date_to
          schema: { type: string, format: date, example: "2025-12-31" }
      responses:
        '200':
          description: List of Sales Orders
          content:
            application/json:
              example:
                success: true
                employee: "John Smith"
                total_count: 42
                stats:
                  draft: 2
                  sent: 3
                  sale: 10
                  done: 5
                  cancel: 1
                orders:
                  - id: 201
                    name: "SO0001"
                    partner: "John Doe"
                    state: "sale"
                    amount_total: 800.0

  # ------------------ PRODUCTS ------------------

  /api/products:
    get:
      tags: [Products]
      summary: Get all products
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema: { type: integer, example: 50 }
        - name: offset
          in: query
          schema: { type: integer, example: 0 }
        - name: search
          in: query
          schema: { type: string, example: "laptop" }
      responses:
        '200':
          description: List of products
          content:
            application/json:
              example:
                success: true
                total_count: 100
                products:
                  - id: 42
                    name: "Laptop"
                    default_code: "LT-001"
                    list_price: 1000
                    standard_price: 800
                    uom_id: 1
                    uom_name: "Units"
                    categ_id: 5
                    categ_name: "Electronics"
                    barcode: "1234567890"
                    active: true
                    qty_available: 50

  /api/products/{product_id}/image:
    get:
      tags: [Products]
      summary: Get product image
      parameters:
        - name: product_id
          in: path
          required: true
          schema: { type: integer }
        - name: size
          in: query
          schema:
            type: string
            enum: [thumbnail, small, medium, large, original]
            default: medium
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Binary image response

  /api/products/{product_id}/image-info:
    get:
      tags: [Products]
      summary: Get product image info (base64)
      parameters:
        - name: product_id
          in: path
          required: true
          schema: { type: integer }
        - name: size
          in: query
          schema:
            type: string
            enum: [thumbnail, small, medium, large, original]
            default: medium
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Product image info
          content:
            application/json:
              example:
                success: true
                has_image: true
                product_id: 42
                product_name: "Laptop"
                image_size: "medium"
                image_data: "<base64_string>"
                image_format: "image/png"
                image_url: "/api/products/42/image?size=medium"

  # ------------------ UNITS OF MEASURE ------------------

  /api/uom:
    get:
      tags: [Units of Measure]
      summary: Get all UoMs
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema: { type: integer, example: 50 }
        - name: offset
          in: query
          schema: { type: integer, example: 0 }
        - name: search
          in: query
          schema: { type: string, example: "kg" }
      responses:
        '200':
          description: List of UoMs
          content:
            application/json:
              example:
                success: true
                total_count: 10
                uoms:
                  - id: 1
                    name: "Units"
                    category_id: 1
                    category_name: "Units"
                    uom_type: "bigger"
                    ratio: 1.0
                    rounding: 0.01
                    active: true

  # ------------------ PRODUCT CATEGORIES ------------------

  /api/product/categories:
    get:
      tags: [Product Categories]
      summary: Get product categories
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema: { type: integer, example: 50 }
        - name: offset
          in: query
          schema: { type: integer, example: 0 }
        - name: search
          in: query
          schema: { type: string, example: "electronics" }
        - name: parent_id
          in: query
          schema: { type: string, example: "false" }
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              example:
                success: true
                total_count: 5
                categories:
                  - id: 1
                    name: "Electronics"
                    complete_name: "Electronics"
                    product_count: 10

  /api/product/categories/{category_id}:
    get:
      tags: [Product Categories]
      summary: Get a single product category
      parameters:
        - name: category_id
          in: path
          required: true
          schema: { type: integer }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Category info
          content:
            application/json:
              example:
                success: true
                category:
                  id: 1
                  name: "Electronics"
                  complete_name: "Electronics"
                  product_count: 10
